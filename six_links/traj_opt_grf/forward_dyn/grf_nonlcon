function [c,ceq,gradc,gradceq] = discrete_nonlcon(x,p)
%% add the last column
x0 = p.mapA*x(:,1)-p.mapB;
x = [x,x0];


%%
[ceq1,gradceq1] = dynConst_discrete(x,p);
[ceq2,gradceq2] = hipCon(x,p);
% [ceq2,gradceq2] = toeCon(x,p);
[c1,ceq3,gradc1,gradceq3]=grf_cons_d(x,p);

[ceq4,gradceq4]=initYPosCons(x,p);
% [ceq5,gradceq5]=hip_vel_con(x,p);
[c2,gradc2]=yposCon(x,p);
% [c3,gradc3] = dynConst_discrete1(x,p);
% [c4,gradc4] = dynConst_discrete2(x,p);

% c2=[];
% gradc2=[];
% c=c2;
% gradc=gradc2;
c = [c1;c2];
gradc=[gradc1,gradc2];
ceq=[ceq1;ceq2;ceq3;ceq4];
gradceq=[gradceq1,gradceq2,gradceq3,gradceq4];


% the gradient of the last column should be add on the first column

gradc(1:p.numJ*2+2,:) = gradc(1:p.numJ*2+2,:)+p.mapA*gradc(end-p.numJ*2-1:end,:);
gradc = gradc(1:end-p.numJ*2-2,:);
gradceq(1:p.numJ*2+2,:) = gradceq(1:p.numJ*2+2,:)+p.mapA*gradceq(end-p.numJ*2-1:end,:);
gradceq = gradceq(1:end-p.numJ*2-2,:);

end