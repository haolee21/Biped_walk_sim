function [c,ceq,gradc,gradceq]=grf_cons_fwdDyn(x,qext,p)
% equality constraint



%need average
grf_toe_c2 = zeros(size(x,2)-1,1);
grf_heel_c2 = zeros(size(x,2)-1,1);
grf_toe_c4 = zeros(size(x,2)-1,1);
grf_heel_c4 = zeros(size(x,2)-1,1);


dgrf_toe_c2 = zeros(size(x,1),size(x,2),size(x,2)-1);
dgrf_heel_c2 = zeros(size(x,1),size(x,2),size(x,2)-1);
dgrf_toe_c4 = zeros(size(x,1),size(x,2),size(x,2)-1);
dgrf_heel_c4 = zeros(size(x,1),size(x,2),size(x,2)-1);

for i=1:size(x,2)-1 %we only have totT-1 constraints since all velocity is generated by (q2-q1)/sampT
    
    % one of the important thing for using this condition in discrete-time
    % is all fo the states need to be averaged
    q1 = qext(1:p.numJ,i);
    q2 = qext(1:p.numJ,i+1);
    fx_toe1 = x(p.numJ+1,i);
    fx_toe2 = x(p.numJ+1,i+1);
    fx_heel1 = x(p.numJ+2,i);
    fx_heel2 = x(p.numJ+2,i+1);
    q = (q1+q2)/2;
    dq = (q2-q1)/p.sampT;
    fx_toe = (fx_toe1+fx_toe2)/2;
    fx_heel =(fx_heel1+fx_heel2)/2;
    

    toe_flag = 0;
    if(toePos_y(q.')<p.toe_th)
        grf_toe_c2(i,1)=Grf_toe_c2(q.',dq.',fx_toe,p.toe_th,p.k,p.cmax,p.dmax,p.us,p.sampT);
        toe_flag=1;
    else
        grf_toe_c2(i,1)=fx_toe;
    end
    heel_flag=0;
    if(heelPos_y(q.')<p.toe_th)
        grf_heel_c2(i,1)=Grf_heel_c2(q.',dq.',fx_heel,p.toe_th,p.k,p.cmax,p.dmax,p.us,p.sampT);
        heel_flag=1;
    else
        grf_heel_c2(i,1)=fx_heel;
    end
    
    
    
    
    grf_toe_c4(i,1)=Grf_toe_c4(q.',dq.',fx_toe);
    grf_heel_c4(i,1)=Grf_heel_c4(q.',dq.',fx_heel);
    

    if nargout>2
        
    
        if(toe_flag==1)
            
            
            dgrf_toe_c2(p.numJ+1,i,i)=dgrf_toe_c2(p.numJ+1,i,i)+0.5*dGrf_toe_c2_dfx(q.',dq.',fx_toe,p.toe_th,p.k,p.cmax,p.dmax,p.us,p.sampT);
            dgrf_toe_c2(p.numJ+1,i+1,i)=dgrf_toe_c2(p.numJ+1,i+1,i)+0.5*dGrf_toe_c2_dfx(q.',dq.',fx_toe,p.toe_th,p.k,p.cmax,p.dmax,p.us,p.sampT);
        else
            dgrf_toe_c2(p.numJ+1,i,i)=dgrf_toe_c2(p.numJ+1,i,i)+0.5;
            dgrf_toe_c2(p.numJ+1,i+1,i)=dgrf_toe_c2(p.numJ+1,i+1,i)+0.5;
            
        end
        if(heel_flag==1)
            
            
            dgrf_heel_c2(p.numJ+2,i,i)=dgrf_heel_c2(p.numJ+2,i,i)+0.5*dGrf_heel_c2_dfx(q.',dq.',fx_heel,p.toe_th,p.k,p.cmax,p.dmax,p.us,p.sampT);
            dgrf_heel_c2(p.numJ+2,i+1,i)=dgrf_heel_c2(p.numJ+2,i+1,i)+0.5*dGrf_heel_c2_dfx(q.',dq.',fx_heel,p.toe_th,p.k,p.cmax,p.dmax,p.us,p.sampT);
        else
            dgrf_heel_c2(p.numJ+2,i,i)=dgrf_heel_c2(p.numJ+2,i,i)+0.5;
            dgrf_heel_c2(p.numJ+2,i+1,i)=dgrf_heel_c2(p.numJ+2,i+1,i)+0.5;
            
        end
        
        
        
        
        
        dgrf_toe_c4(p.numJ+1,i,i)=dGrf_toe_c4_F(q.',dq.')*0.5;
        dgrf_toe_c4(p.numJ+1,i+1,i)=dGrf_toe_c4_F(q.',dq.')*0.5;
        
        
        dgrf_heel_c4(p.numJ+2,i,i)=dGrf_heel_c4_F(q.',dq.')*0.5;
        dgrf_heel_c4(p.numJ+2,i+1,i)=dGrf_heel_c4_F(q.',dq.')*0.5;
        
        
       
        
    end
    
                       
    
    
end


c =  [grf_toe_c2;
      grf_heel_c2;
      grf_toe_c4;
      grf_heel_c4];
gradc=[reshape(dgrf_toe_c2,[size(x,1)*size(x,2),size(x,2)-1]),...
       reshape(dgrf_heel_c2,[size(x,1)*size(x,2),size(x,2)-1]),...
       reshape(dgrf_toe_c4, [size(x,1)*size(x,2),size(x,2)-1]),...
       reshape(dgrf_heel_c4,[size(x,1)*size(x,2),size(x,2)-1])];
   

ceq = [];
gradceq=[];


end